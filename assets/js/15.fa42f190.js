(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{331:function(t,s,a){t.exports=a.p+"assets/img/plot_tool_ui_1.07411061.png"},387:function(t,s,a){"use strict";a.r(s);var n=a(5),e=function(t){t.options.__data__block__={flowchart_382ee1c9:"\nst=>start: 开始\ne=>end: 结束\ncache_cond=>condition: Cut结果为空？\ncut=>operation: 生成分词信息\nstore=>operation: 保存到Cut结果\nreturn=>operation: 返回Cut结果\n\nst->cache_cond\ncache_cond(no)->cut->store->return->e\ncache_cond(yes)->return->e",flowchart_382ee1e9:"st=>start: 开始\ngen_dict=>operation: 生成分词字典\nimport_dict=>operation: 导入分词器\ncut=>operation: 分词\nreplace=>operation: 将角色别名替换为角色正式名称\nfilter=>operation: 过滤掉停用词\ndiff=>operation: 求结果和分词字典的交集\ne=>end: 结束\n\nst->gen_dict->import_dict->cut->replace->filter->diff->e\ne=>end: 结束"}},r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"使用tkinter开发基于jieba的剧情分词工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用tkinter开发基于jieba的剧情分词工具"}},[t._v("#")]),t._v(" 使用Tkinter开发基于Jieba的剧情分词工具")]),t._v(" "),n("p",[t._v("先上个成果图吧：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://github.com/KXXH/KR_plot_analysis/raw/master/img/tool_ui_1.png",alt:"UI界面"}})]),t._v(" "),n("h2",{attrs:{id:"实现的功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现的功能"}},[t._v("#")]),t._v(" 实现的功能")]),t._v(" "),n("ul",[n("li",[t._v("共现矩阵的生成和导出——帮助生成关系图")]),t._v(" "),n("li",[t._v("频繁模式的识别和导出——帮助分析人物关系")]),t._v(" "),n("li",[t._v("词频的统计和导出")]),t._v(" "),n("li",[t._v("分词和导出")]),t._v(" "),n("li",[t._v("角色和别名识别（人工录入）")])]),t._v(" "),n("h2",{attrs:{id:"用tk写gui真的反人类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用tk写gui真的反人类"}},[t._v("#")]),t._v(" 用Tk写GUI真的反人类")]),t._v(" "),n("p",[t._v("Tk和一大波有着悠久历史的GUI框架，布局文件和业务逻辑代码不分。想来想去最好的办法是用类和继承来封装控件，不过一开始就只打算做个小工具，所以没有做类的封装。结果搞得十分头大，全局变量一堆，UI逻辑代码就奔着400行去了，唉，还是太年轻了😂。有机会再重构吧。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(331),alt:"UI整体结构"}})]),t._v(" "),n("p",[t._v("在Tk中，只有三种布局方式，pack，place和grid。其中，pack只能选择飘到某一边，place只能根据绝对位置进行定位，二者都不如grid灵活。不过，通过pack和Frame组合，也能起到不错的效果。我们这里使用grid布局，使用Frame整合较小的部件，以方便布局。蓝色的Frame是文字编辑区域，使用"),n("code",[t._v("Notebook")]),t._v("组件实现标签切换。每个标签下有一个"),n("code",[t._v("Text")]),t._v("，显示文字内容。")]),t._v(" "),n("p",[t._v("实际上这三个Tag之间是有联系的，当切换到分句或者分词时，应该"),n("strong",[t._v("根据填入的剧情去刷新分句和分词的内容")]),t._v("。但是"),n("code",[t._v("Notebook")]),t._v("组件的唯一事件——"),n("code",[t._v("<<NotebookTabChanged>>")]),t._v("携带的参数似乎并不能真实反映选中激活的Tag。因此不得不使用比较Low的办法，手动在获得事件回调时，获取当前激活的Tag，进行比较：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tab_switch_callback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" main_ntb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main_ntb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" plot_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" END"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        mt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        refresh_splited_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" plot_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" END"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        mt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        refresh_cut_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nmain_ntb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<<NotebookTabChanged>>"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tab_switch_callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("p",[t._v("当然每次点击就发送文本给分词器开销未免太大，特别是在文本较长的情况下。因此我使用了一些缓存，每次对分词器调用"),n("code",[t._v("set_text")]),t._v("方法时，会先比对发送来的文本与已有文本是否一致。如果一致则忽略，否则，积极修改分句结果（因为分句使用正则表达式，效率还是比较高的），惰性修改分词结果（清除分词结果缓存，下次调用分词方法时重新生成）。")]),t._v(" "),n("FlowChart",{attrs:{id:"flowchart_382ee1c9",code:t.$dataBlock.flowchart_382ee1c9,preset:"vue"}}),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_text")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text\n            self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_split_text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_cache_expired"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缓存过期")]),t._v("\n")])])]),n("h2",{attrs:{id:"关于分词词典和名称处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于分词词典和名称处理"}},[t._v("#")]),t._v(" 关于分词词典和名称处理")]),t._v(" "),n("p",[t._v("分词词典是一定要做的，因为通常的剧情介绍中都含有大量的人名，而人名在分词中是有一定概率被切开的。同时，我们也要处理各种指向同一个人的别称。NLP中有“共指消解”也是类似于这一目的。但是目前在中文领域共指消解的效果并不是十分理想，因此我们还是选用了手动录入别称的办法。")]),t._v(" "),n("p",[t._v("我们在分词器中使用了两个字典来保存这一组信息。其中一组称为“名称字典”，保存的Key是角色的"),n("em",[t._v("正式名称")]),t._v("（出现在共现矩阵等位置的名称），value是角色的别名的"),n("em",[t._v("集合")]),t._v("。该部分用于直观地管理一个角色拥有的多个别名。另一组称之为“倒排名称字典”，类似于搜索引擎中的倒排索引的究极简化版。这一部分保存的是别名→角色名的映射，用于替换角色的别名。当需要分词时，我们用两组字典的Key的集合的并集作为分词字典。")]),t._v(" "),n("FlowChart",{attrs:{id:"flowchart_382ee1e9",code:t.$dataBlock.flowchart_382ee1e9,preset:"vue"}}),n("p",[t._v("经过上述操作就可以得到每行出现的角色。")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("names_by_sentence")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" drop_empty"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        cut_result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cut"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        words_dict "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_generate_words_dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" line "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cut_result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#替换角色名")]),t._v("\n            word_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reversed_name_dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" word "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" word "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#过滤停用词")]),t._v("\n            word_set_without_stopwords "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" word"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" word "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("STOPWORDS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" word_set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#取剩余结果和角色名字典的交集")]),t._v("\n            name_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" word_set_without_stopwords "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" words_dict\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" drop_empty "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" name_set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" name_set\n")])])]),n("h2",{attrs:{id:"关于共现矩阵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于共现矩阵"}},[t._v("#")]),t._v(" 关于共现矩阵")]),t._v(" "),n("p",[t._v("稍微找了一下，也没有看到方便的共现矩阵库，于是自己写了一个很"),n("s",[t._v("简陋")]),t._v("简单的实现。整体的复杂度还是挺高的，利用了"),n("code",[t._v("itertools.combinations")]),t._v("这一魔法迭代器，即：对于每行提取出的角色集合，生成他们的所有长度为2的组合。对于每一个组合，我们计算其出现了一次。由于共现矩阵应该是比较稀疏的，因此使用"),n("code",[t._v("defaultdict")]),t._v("，可以比较方便地抽象这一种情形（当然，"),n("code",[t._v("Counter")]),t._v("也可以。但是"),n("code",[t._v("Counter")]),t._v("只能对元组计数，如果只是统计角色对的出现次数是没有任何问题，而且能把代码写得更加简洁，不过我们想要的是矩阵，"),n("code",[t._v("Counter")]),t._v("的Key是元组，需要多一层转换。）")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("co_present")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" defaultdict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" defaultdict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name_set "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("names_by_sentence"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name2 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" combinations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name_set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n\n")])])]),n("h2",{attrs:{id:"遗憾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遗憾"}},[t._v("#")]),t._v(" 遗憾")]),t._v(" "),n("ul",[n("li",[t._v("~~目前，还需要先选中角色，点击【选中角色】，才能选中该角色，编辑和查看其对应的别名。实际上这一步是赘余的、误导性的、破坏用户体验的。可以使用事件侦听处理掉。~~目前已使用事件侦听处理。")]),t._v(" "),n("li",[t._v("没有使用面向对象的方式处理GUI。这是最大的痛点，后期维护上比较困难。")]),t._v(" "),n("li",[t._v("使用Tk！Tk确实还是有很大的制约性的，各种控件的回调比较不自由，虽然可以通过事件侦听解决，但是可能会使得一些上下文相关的代码四散在各处（包括新建UI对象、UI的config、UI的variable设置、UI渲染都有各自的函数），在阅读代码时可能会有困难。")])])],1)}),[],!1,null,null,null);"function"==typeof e&&e(r);s.default=r.exports}}]);